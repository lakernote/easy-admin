server:
  port: 8080
  compression:
    enabled: true
    min-response-size: 1KB
    mime-types: application/json,application/xml,text/html,text/xml,text/plain,application/javascript,text/css
  # tomcat配置
  tomcat:
    # 允许最大连接数,默认8192,当达到临界值时,系统会基于accept-count继续接受连接 参数是客户感知型参数。
    max-connections: 8192
    # 当所有线程都在使用时,建立连接的请求的等待队列长度,默认100 请求的backlog值 如果超过max-connections和accept-count总和，新的连接会被拒绝，即直接拒绝服务（直接返回connection refused）
    accept-count: 100
    # 连接器在关闭空闲连接之前等待的毫秒数，默认 20000 20s
    connection-timeout: 20s
    uri-encoding: UTF-8
    threads:
      # 线程池的最小工作线程数,默认10
      min-spare: 50
      # 线程池的最大线程数,默认200
      max: 1000
  servlet:
    context-path: /
spring:
  application:
    name: easy-admin
  autoconfigure:
  #    exclude: org.springframework.boot.actuate.autoconfigure.metrics.web.tomcat.TomcatMetricsAutoConfiguration
  datasource:
    username: root
    password: 123456
    url: jdbc:mysql://localhost:3306/laker?serverTimezone=GMT%2B8&characterEncoding=utf8&useSSL=false&allowPublicKeyRetrieval=true
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      minimum-idle: 5
      maximum-pool-size: 20
  profiles:
    active: local,kafka,redis
  task:
    execution:
      pool:
        max-size: 10
        queue-capacity: 1
      thread-name-prefix: easy-
  freemarker:
    suffix: .ftl
  servlet:
    multipart:
      max-file-size: 20MB
  flyway:
    enabled: true
    # 历史表
    baselineOnMigrate: true
    validateOnMigrate: true
    # flyway的sql脚本路径
    locations: classpath:db/migration
  cloud:
    openfeign:
      micrometer:
        enabled: true
      client:
        config:
          default:
            connect-timeout: 5000
            read-timeout: 5000
            logger-level: full
            dismiss404: false
            # Feign使用默认的超时配置，在该类源码中可见，默认单次请求最大时长1秒，重试5次
            retryer: feign.Retryer.Default
    discovery:
      enabled: false
mybatis-plus:
  # 配置日志 #仅控制台输出的日志
  #  configuration:
  #  log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  global-config:
    # 是否开启print logo
    banner: false
javamelody:
  # javamelody监控的开关
  enabled: false
  # Enable monitoring of Spring services and controllers (optional, default: true)
  spring-monitoring-enabled: true
  # Initialization parameters for JavaMelody (optional)
  # See: https://github.com/javamelody/javamelody/wiki/UserGuide#6-optional-parameters
  init-parameters:
    # log http requests:
    log: true
    # to exclude images, css, fonts and js urls from the monitoring:
    #url-exclude-pattern: (/webjars/.*|/css/.*|/images/.*|/fonts/.*|/js/.*)
    # to aggregate digits in http requests:
    #http-transform-pattern: \d+
    # to add basic auth:
    #authorized-users: admin:pwd
    # to change the default storage directory:
    #storage-directory: /tmp/javamelody
    # to change the default "/monitoring" path:
    #monitoring-path: /admin/performance
# sa-token配置
sa-token:
  # token名称 (同时也是cookie名称)
  token-name: LakerToken
  # token有效期，单位s 默认30天, -1代表永不过期
  timeout: 1800
  # token临时有效期 [指定时间内无操作就视为token过期] (单位: 秒), 默认-1 代表不限制
  active-timeout: 1800
  # 在多人登录同一账号时，是否共用一个token (为true时所有登录共用一个token, 为false时每次登录新建一个token)
  is-share: false
  # token风格
  token-style: simple-uuid
  # 是否打印操作日志
  is-log: false
  is-print: false
  # 是否允许同一账号并发登录 (为true时允许一起登录, 为false时新登录挤掉旧登录)
  is-concurrent: true
easy:
  # web防火墙配置
  waf:
    sql-enabled: false
    xss-enabled: false
    excludes: /flow/*,/sys/nginx/*
  # 文件服务endpoint
  oss-file:
    domain: http://localhost:8080
    path: storage
  trace:
    time: 1000
# actuator
management:
  tracing:
    enabled: true
    sampling:
      probability: 1.0
  endpoint:
    info:
      enabled: true
    health:
      # 生成环境的话注意安全问题
      show-details: always
      group:
        liveness:
          include: livenessState
        readiness:
          include: '*'
  health:
    redis:
      enabled: true
    readinessstate:
      enabled: true
    livenessstate:
      enabled: true
  influx:
    metrics:
      export:
        enabled: false
        password: 12345678
        user-name: easy-admin
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  info:
    build:
      enabled: true
    env:
      enabled: true
    java:
      enabled: true
    os:
      enabled: true
    git:
      enabled: true
      mode: simple
info:
  # 环境变量
  java-vendor: ${java.specification.vendor}
  app:
    author: laker
    # 项目版本
    version: @project.version@
    name: easy-admin
# knife4j的增强配置，不需要增强可以不配置
knife4j:
  # 开启增强
  enable: true
  # 不是很重要的环境，但是又不想暴露文档可以用这个
  basic:
    # 开启basic认证 输入用户名密码才能访问/doc.html
    enable: false
    # 认证用户名
    password: easy-admin
    # 认证密码
    username: easy-admin
  # 是否生产环境 屏蔽所有资源接口,一般这个用于生产环境 屏蔽资源，与上面二选一
  # production: true
  setting:
    language: zh_cn
# springdoc-openapi 项目配置
# 用于生成OpenAPI 3.0规范的库，适用于Spring Boot应用程序。它可以自动生成API文档，并提供Swagger UI以便于查看和测试API
springdoc:
  # http://localhost:8080/swagger-ui/index.html
  # http://localhost:8080/doc.html#/home
  swagger-ui:
    path: /swagger-ui.html
    tags-sorter: alpha
    operations-sorter: alpha
    enabled: true
  api-docs:
    path: /v3/api-docs
    enabled: true
  group-configs:
    - group: 'ext'
      display-name: '1.扩展模块'
      paths-to-match: '/**'
      packages-to-scan: com.laker.admin.module.ext
logging:
  level:
    com.laker.admin.module.remote: error