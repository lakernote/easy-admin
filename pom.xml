<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.2.4</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>easy-admin</artifactId>
    <version>1.0.0</version>

    <properties>
        <!-- 1.编译器和JRE的版本默认为1.5,强制指定为17 -->
        <!--     该配置并非Maven官方的配置,是SpringBoot官方做的,约等于下面2个设置17 -->
        <java.version>17</java.version>
        <!--     maven 编译代码使用的jdk版本  -->
        <maven.compiler.source>17</maven.compiler.source>
        <!--     maven 执行代码使用的jdk版本  -->
        <maven.compiler.target>17</maven.compiler.target>

        <!-- 2.指定编码字符集 解决中文乱码 -->
        <!--     maven 编译使用的编码  -->
        <maven.compiler.encoding>UTF-8</maven.compiler.encoding>
        <!--     maven 进行项目构建使用的编码，避免中文乱码  -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <!--  maven 生成项目报告使用的编码  -->
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

        <!-- 3.maven打包跳过测试  true/false -->
        <skipTests>true</skipTests>
        <!-- 其他依赖组件版本 -->
        <hutool.version>5.8.25</hutool.version>
        <mybatis-plus.version>3.5.5</mybatis-plus.version>
        <sa-token-spring-boot3-starter.version>1.37.0</sa-token-spring-boot3-starter.version>
        <mysql-connector-j.version>8.3.0</mysql-connector-j.version>
        <guava.version>33.0.0-jre</guava.version>
        <spring-cloud.version>2023.0.1</spring-cloud.version>
    </properties>

    <dependencies>
        <!-- easy-admin-client -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <!-- 工具类 -->
        <dependency>
            <groupId>cn.hutool</groupId>
            <artifactId>hutool-all</artifactId>
            <version>${hutool.version}</version>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <!-- mybatis -->
        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus-spring-boot3-starter</artifactId>
            <version>${mybatis-plus.version}</version>
        </dependency>

        <!-- mysql -->
        <dependency>
            <groupId>com.mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
            <version>${mysql-connector-j.version}</version>
        </dependency>

        <!-- aop -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-aop</artifactId>
        </dependency>

        <!-- 接口文档 -->
        <dependency>
            <groupId>com.github.xiaoymin</groupId>
            <artifactId>knife4j-openapi3-jakarta-spring-boot-starter</artifactId>
            <version>4.3.0</version>
        </dependency>

        <!-- 认证授权 -->
        <dependency>
            <groupId>cn.dev33</groupId>
            <artifactId>sa-token-spring-boot3-starter</artifactId>
            <version>${sa-token-spring-boot3-starter.version}</version>
        </dependency>

        <!-- 应用监控 -->
        <dependency>
            <groupId>net.bull.javamelody</groupId>
            <artifactId>javamelody-spring-boot-starter</artifactId>
            <version>2.1.0</version>
        </dependency>

        <!-- 参数校验 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>

        <!-- websocket -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-websocket</artifactId>
        </dependency>

        <!-- 配置管理 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- test -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- actuator -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <!-- kafka -->
        <dependency>
            <groupId>org.springframework.kafka</groupId>
            <artifactId>spring-kafka</artifactId>
        </dependency>
        <!-- 缓存 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-cache</artifactId>
        </dependency>
        <!-- 用于数据库版本管理 -->
        <dependency>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-mysql</artifactId>
        </dependency>
        <!-- redis -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>
        <!-- // redisson-spring-boot-starter Redis客户端库，提供对基于Redis的数据结构的支持，可以用作分布式锁、缓存或队列。-->
        <!-- https://github.com/redisson/redisson/tree/master/redisson-spring-boot-starter -->
        <dependency>
            <groupId>org.redisson</groupId>
            <artifactId>redisson-spring-boot-starter</artifactId>
            <version>3.28.0</version>
        </dependency>

        <!-- guava -->
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>${guava.version}</version>
        </dependency>

        <!-- openfeign -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-openfeign</artifactId>
        </dependency>

        <!-- feign-micrometer trace and metrics-->
        <dependency>
            <groupId>io.github.openfeign</groupId>
            <artifactId>feign-micrometer</artifactId>
        </dependency>

        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-tracing</artifactId>
        </dependency>

        <dependency>
            <groupId>com.github.loki4j</groupId>
            <artifactId>loki-logback-appender</artifactId>
            <version>1.5.1</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.kafka</groupId>
            <artifactId>spring-kafka-test</artifactId>
            <scope>test</scope>
        </dependency>


        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-registry-influx</artifactId>
            <version>1.13.3</version>
        </dependency>

    </dependencies>

    <build>
        <!-- 打包后的启动jar名称 -->
        <finalName>easyAdmin</finalName>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <!-- actuator/info 中 开启 构建信息，mvn 构建后才会生成META-INF/build-info.properties 文件 -->
                            <goal>build-info</goal>
                        </goals>
                        <configuration>
                            <excludeInfoProperties>
                                <!-- 排除 artifact 信息 -->
                                <infoProperty>group</infoProperty>
                            </excludeInfoProperties>
                            <additionalProperties>
                                <!-- 自定义属性 -->
                                <custom.key1>easy</custom.key1>
                                <custom.key2>note</custom.key2>
                            </additionalProperties>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- actuator/info 中 开启 构建期间 Git 提交的信息，mvn 构建后才会生成git.properties 文件 -->
            <plugin>
                <groupId>io.github.git-commit-id</groupId>
                <artifactId>git-commit-id-maven-plugin</artifactId>
                <configuration>
                    <excludeProperties>
                        <!-- 排除 time 属性 -->
                        <excludeProperty>time</excludeProperty>
                    </excludeProperties>
                    <!--                    <includeOnlyProperties>-->
                    <!--                        &lt;!&ndash; 只包含 git.commit.id 属性 &ndash;&gt;-->
                    <!--                        <property>git.commit.id</property>-->
                    <!--                    </includeOnlyProperties>-->
                </configuration>
            </plugin>

            <!-- 代码覆盖率报告 -->
            <!-- mvn clean verify 生成的覆盖率报告可以在 target/site/jacoco/index.html 文件中查看-->
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>0.8.8</version>
                <executions>
                    <!-- Prepare agent before tests run -->
                    <!-- 在测试运行之前准备 JaCoCo 代理，用于收集覆盖率数据。 -->
                    <execution>
                        <id>prepare-agent</id>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>
                    <!-- Generate coverage report after tests run -->
                    <!-- 在 verify 阶段生成覆盖率报告。 -->
                    <execution>
                        <id>report</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                    </execution>
                    <!-- Check coverage thresholds -->
                    <!-- 在 verify 阶段检查覆盖率是否达到预期值。 -->
                    <execution>
                        <id>check</id>
                        <goals>
                            <goal>check</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <rule>
                                    <!-- 检查覆盖率的范围 BUNDLE 表示整个项目（或模块）。
                                    其他可能的值包括 PACKAGE、CLASS 和 METHOD，分别表示包、类和方法级别的覆盖率检查-->
                                    <element>BUNDLE</element>
                                    <limits>
                                        <limit>
                                            <!-- INSTRUCTION 表示指令覆盖率，即代码中每个指令的覆盖情况。其他可能的值包括 LINE（行覆盖率）、BRANCH（分支覆盖率）、COMPLEXITY（复杂度覆盖率）等-->
                                            <counter>LINE</counter>
                                            <value>COVEREDRATIO</value>
                                            <!-- 覆盖率的最小值 指令覆盖率的最低阈值是 80%。如果实际覆盖率低于这个值，构建将失败。-->
                                            <minimum>0.80</minimum>
                                        </limit>
                                        <limit>
                                            <counter>BRANCH</counter>
                                            <value>COVEREDRATIO</value>
                                            <minimum>0.70</minimum>
                                        </limit>
                                    </limits>
                                </rule>
                            </rules>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

        </plugins>
    </build>

    <repositories>
        <!-- https://developer.aliyun.com/mvn/guide -->
        <repository>
            <id>Aliyun-repository</id>
            <url>https://maven.aliyun.com/repository/public</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
    </repositories>

    <pluginRepositories>
        <pluginRepository>
            <id>Aliyun-pluginRepository</id>
            <url>https://maven.aliyun.com/repository/public</url>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </pluginRepository>
    </pluginRepositories>
</project>